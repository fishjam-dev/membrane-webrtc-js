// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "common.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "./google/protobuf/any";
/**
 * @generated from protobuf message MediaEvent
 */
export interface MediaEvent {
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "join";
        /**
         * @generated from protobuf field: Join join = 1;
         */
        join: Join;
    } | {
        oneofKind: "leave";
        /**
         * @generated from protobuf field: Leave leave = 2;
         */
        leave: Leave;
    } | {
        oneofKind: "peerChanged";
        /**
         * @generated from protobuf field: PeerChanged peerChanged = 3;
         */
        peerChanged: PeerChanged;
    } | {
        oneofKind: "tracksChanged";
        /**
         * @generated from protobuf field: TracksChanged tracksChanged = 4;
         */
        tracksChanged: TracksChanged;
    } | {
        oneofKind: "tracksPriority";
        /**
         * @generated from protobuf field: TrackPriorityMediaEvent tracksPriority = 5;
         */
        tracksPriority: TrackPriorityMediaEvent;
    } | {
        oneofKind: "error";
        /**
         * @generated from protobuf field: string error = 6;
         */
        error: string;
    } | {
        oneofKind: "custom";
        /**
         * @generated from protobuf field: google.protobuf.Any custom = 2137;
         */
        custom: Any;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message Join
 */
export interface Join {
    /**
     * @generated from protobuf field: bytes metadata = 1;
     */
    metadata: Uint8Array;
}
/**
 * @generated from protobuf message Leave
 */
export interface Leave {
}
/**
 * @generated from protobuf message PeerChanged
 */
export interface PeerChanged {
    /**
     * @generated from protobuf field: string peerId = 1;
     */
    peerId: string;
    /**
     * @generated from protobuf oneof: action
     */
    action: {
        oneofKind: "left";
        /**
         * @generated from protobuf field: PeerChanged.Payload.Empty left = 2;
         */
        left: PeerChanged_Payload_Empty;
    } | {
        oneofKind: "removed";
        /**
         * @generated from protobuf field: PeerChanged.Payload.WithReason removed = 3;
         */
        removed: PeerChanged_Payload_WithReason;
    } | {
        oneofKind: "denied";
        /**
         * @generated from protobuf field: PeerChanged.Payload.WithReason denied = 4;
         */
        denied: PeerChanged_Payload_WithReason;
    } | {
        oneofKind: "accepted";
        /**
         * @generated from protobuf field: PeerChanged.Payload.Empty accepted = 5;
         */
        accepted: PeerChanged_Payload_Empty;
    } | {
        oneofKind: "joined";
        /**
         * @generated from protobuf field: PeerChanged.Payload.WithMetadata joined = 6;
         */
        joined: PeerChanged_Payload_WithMetadata;
    } | {
        oneofKind: "updated";
        /**
         * @generated from protobuf field: PeerChanged.Payload.WithMetadata updated = 7;
         */
        updated: PeerChanged_Payload_WithMetadata;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message PeerChanged.Payload
 */
export interface PeerChanged_Payload {
}
/**
 * @generated from protobuf message PeerChanged.Payload.Empty
 */
export interface PeerChanged_Payload_Empty {
}
/**
 * @generated from protobuf message PeerChanged.Payload.WithReason
 */
export interface PeerChanged_Payload_WithReason {
    /**
     * @generated from protobuf field: string reason = 1;
     */
    reason: string;
}
/**
 * @generated from protobuf message PeerChanged.Payload.WithMetadata
 */
export interface PeerChanged_Payload_WithMetadata {
    /**
     * @generated from protobuf field: bytes metadata = 1;
     */
    metadata: Uint8Array;
}
/**
 * @generated from protobuf message TracksChanged
 */
export interface TracksChanged {
    /**
     * @generated from protobuf field: string peerId = 1;
     */
    peerId: string;
    /**
     * @generated from protobuf oneof: action
     */
    action: {
        oneofKind: "update";
        /**
         * @generated from protobuf field: TracksChanged.Payload.Track update = 2;
         */
        update: TracksChanged_Payload_Track;
    } | {
        oneofKind: "add";
        /**
         * @generated from protobuf field: TracksChanged.Payload.Track add = 3;
         */
        add: TracksChanged_Payload_Track;
    } | {
        oneofKind: "remove";
        /**
         * @generated from protobuf field: TracksChanged.Payload.Track remove = 4;
         */
        remove: TracksChanged_Payload_Track;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message TracksChanged.Payload
 */
export interface TracksChanged_Payload {
}
/**
 * @generated from protobuf message TracksChanged.Payload.Track
 */
export interface TracksChanged_Payload_Track {
    /**
     * @generated from protobuf field: string trackId = 1;
     */
    trackId: string;
    /**
     * @generated from protobuf field: bytes metadata = 2;
     */
    metadata: Uint8Array;
}
/**
 * @generated from protobuf message TrackPriorityMediaEvent
 */
export interface TrackPriorityMediaEvent {
    /**
     * @generated from protobuf field: repeated string trackId = 1;
     */
    trackId: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class MediaEvent$Type extends MessageType<MediaEvent> {
    constructor() {
        super("MediaEvent", [
            { no: 1, name: "join", kind: "message", oneof: "event", T: () => Join },
            { no: 2, name: "leave", kind: "message", oneof: "event", T: () => Leave },
            { no: 3, name: "peerChanged", kind: "message", oneof: "event", T: () => PeerChanged },
            { no: 4, name: "tracksChanged", kind: "message", oneof: "event", T: () => TracksChanged },
            { no: 5, name: "tracksPriority", kind: "message", oneof: "event", T: () => TrackPriorityMediaEvent },
            { no: 6, name: "error", kind: "scalar", oneof: "event", T: 9 /*ScalarType.STRING*/ },
            { no: 2137, name: "custom", kind: "message", oneof: "event", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<MediaEvent>): MediaEvent {
        const message = { event: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MediaEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MediaEvent): MediaEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Join join */ 1:
                    message.event = {
                        oneofKind: "join",
                        join: Join.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).join)
                    };
                    break;
                case /* Leave leave */ 2:
                    message.event = {
                        oneofKind: "leave",
                        leave: Leave.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).leave)
                    };
                    break;
                case /* PeerChanged peerChanged */ 3:
                    message.event = {
                        oneofKind: "peerChanged",
                        peerChanged: PeerChanged.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).peerChanged)
                    };
                    break;
                case /* TracksChanged tracksChanged */ 4:
                    message.event = {
                        oneofKind: "tracksChanged",
                        tracksChanged: TracksChanged.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).tracksChanged)
                    };
                    break;
                case /* TrackPriorityMediaEvent tracksPriority */ 5:
                    message.event = {
                        oneofKind: "tracksPriority",
                        tracksPriority: TrackPriorityMediaEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).tracksPriority)
                    };
                    break;
                case /* string error */ 6:
                    message.event = {
                        oneofKind: "error",
                        error: reader.string()
                    };
                    break;
                case /* google.protobuf.Any custom */ 2137:
                    message.event = {
                        oneofKind: "custom",
                        custom: Any.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).custom)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MediaEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Join join = 1; */
        if (message.event.oneofKind === "join")
            Join.internalBinaryWrite(message.event.join, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Leave leave = 2; */
        if (message.event.oneofKind === "leave")
            Leave.internalBinaryWrite(message.event.leave, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* PeerChanged peerChanged = 3; */
        if (message.event.oneofKind === "peerChanged")
            PeerChanged.internalBinaryWrite(message.event.peerChanged, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* TracksChanged tracksChanged = 4; */
        if (message.event.oneofKind === "tracksChanged")
            TracksChanged.internalBinaryWrite(message.event.tracksChanged, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* TrackPriorityMediaEvent tracksPriority = 5; */
        if (message.event.oneofKind === "tracksPriority")
            TrackPriorityMediaEvent.internalBinaryWrite(message.event.tracksPriority, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string error = 6; */
        if (message.event.oneofKind === "error")
            writer.tag(6, WireType.LengthDelimited).string(message.event.error);
        /* google.protobuf.Any custom = 2137; */
        if (message.event.oneofKind === "custom")
            Any.internalBinaryWrite(message.event.custom, writer.tag(2137, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MediaEvent
 */
export const MediaEvent = new MediaEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Join$Type extends MessageType<Join> {
    constructor() {
        super("Join", [
            { no: 1, name: "metadata", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Join>): Join {
        const message = { metadata: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Join>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Join): Join {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes metadata */ 1:
                    message.metadata = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Join, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes metadata = 1; */
        if (message.metadata.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.metadata);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Join
 */
export const Join = new Join$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Leave$Type extends MessageType<Leave> {
    constructor() {
        super("Leave", []);
    }
    create(value?: PartialMessage<Leave>): Leave {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Leave>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Leave): Leave {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Leave, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Leave
 */
export const Leave = new Leave$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeerChanged$Type extends MessageType<PeerChanged> {
    constructor() {
        super("PeerChanged", [
            { no: 1, name: "peerId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "left", kind: "message", oneof: "action", T: () => PeerChanged_Payload_Empty },
            { no: 3, name: "removed", kind: "message", oneof: "action", T: () => PeerChanged_Payload_WithReason },
            { no: 4, name: "denied", kind: "message", oneof: "action", T: () => PeerChanged_Payload_WithReason },
            { no: 5, name: "accepted", kind: "message", oneof: "action", T: () => PeerChanged_Payload_Empty },
            { no: 6, name: "joined", kind: "message", oneof: "action", T: () => PeerChanged_Payload_WithMetadata },
            { no: 7, name: "updated", kind: "message", oneof: "action", T: () => PeerChanged_Payload_WithMetadata }
        ]);
    }
    create(value?: PartialMessage<PeerChanged>): PeerChanged {
        const message = { peerId: "", action: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PeerChanged>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PeerChanged): PeerChanged {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string peerId */ 1:
                    message.peerId = reader.string();
                    break;
                case /* PeerChanged.Payload.Empty left */ 2:
                    message.action = {
                        oneofKind: "left",
                        left: PeerChanged_Payload_Empty.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).left)
                    };
                    break;
                case /* PeerChanged.Payload.WithReason removed */ 3:
                    message.action = {
                        oneofKind: "removed",
                        removed: PeerChanged_Payload_WithReason.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).removed)
                    };
                    break;
                case /* PeerChanged.Payload.WithReason denied */ 4:
                    message.action = {
                        oneofKind: "denied",
                        denied: PeerChanged_Payload_WithReason.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).denied)
                    };
                    break;
                case /* PeerChanged.Payload.Empty accepted */ 5:
                    message.action = {
                        oneofKind: "accepted",
                        accepted: PeerChanged_Payload_Empty.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).accepted)
                    };
                    break;
                case /* PeerChanged.Payload.WithMetadata joined */ 6:
                    message.action = {
                        oneofKind: "joined",
                        joined: PeerChanged_Payload_WithMetadata.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).joined)
                    };
                    break;
                case /* PeerChanged.Payload.WithMetadata updated */ 7:
                    message.action = {
                        oneofKind: "updated",
                        updated: PeerChanged_Payload_WithMetadata.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).updated)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PeerChanged, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string peerId = 1; */
        if (message.peerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.peerId);
        /* PeerChanged.Payload.Empty left = 2; */
        if (message.action.oneofKind === "left")
            PeerChanged_Payload_Empty.internalBinaryWrite(message.action.left, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* PeerChanged.Payload.WithReason removed = 3; */
        if (message.action.oneofKind === "removed")
            PeerChanged_Payload_WithReason.internalBinaryWrite(message.action.removed, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* PeerChanged.Payload.WithReason denied = 4; */
        if (message.action.oneofKind === "denied")
            PeerChanged_Payload_WithReason.internalBinaryWrite(message.action.denied, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* PeerChanged.Payload.Empty accepted = 5; */
        if (message.action.oneofKind === "accepted")
            PeerChanged_Payload_Empty.internalBinaryWrite(message.action.accepted, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* PeerChanged.Payload.WithMetadata joined = 6; */
        if (message.action.oneofKind === "joined")
            PeerChanged_Payload_WithMetadata.internalBinaryWrite(message.action.joined, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* PeerChanged.Payload.WithMetadata updated = 7; */
        if (message.action.oneofKind === "updated")
            PeerChanged_Payload_WithMetadata.internalBinaryWrite(message.action.updated, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PeerChanged
 */
export const PeerChanged = new PeerChanged$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeerChanged_Payload$Type extends MessageType<PeerChanged_Payload> {
    constructor() {
        super("PeerChanged.Payload", []);
    }
    create(value?: PartialMessage<PeerChanged_Payload>): PeerChanged_Payload {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PeerChanged_Payload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PeerChanged_Payload): PeerChanged_Payload {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PeerChanged_Payload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PeerChanged.Payload
 */
export const PeerChanged_Payload = new PeerChanged_Payload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeerChanged_Payload_Empty$Type extends MessageType<PeerChanged_Payload_Empty> {
    constructor() {
        super("PeerChanged.Payload.Empty", []);
    }
    create(value?: PartialMessage<PeerChanged_Payload_Empty>): PeerChanged_Payload_Empty {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PeerChanged_Payload_Empty>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PeerChanged_Payload_Empty): PeerChanged_Payload_Empty {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PeerChanged_Payload_Empty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PeerChanged.Payload.Empty
 */
export const PeerChanged_Payload_Empty = new PeerChanged_Payload_Empty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeerChanged_Payload_WithReason$Type extends MessageType<PeerChanged_Payload_WithReason> {
    constructor() {
        super("PeerChanged.Payload.WithReason", [
            { no: 1, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PeerChanged_Payload_WithReason>): PeerChanged_Payload_WithReason {
        const message = { reason: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PeerChanged_Payload_WithReason>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PeerChanged_Payload_WithReason): PeerChanged_Payload_WithReason {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string reason */ 1:
                    message.reason = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PeerChanged_Payload_WithReason, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string reason = 1; */
        if (message.reason !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PeerChanged.Payload.WithReason
 */
export const PeerChanged_Payload_WithReason = new PeerChanged_Payload_WithReason$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeerChanged_Payload_WithMetadata$Type extends MessageType<PeerChanged_Payload_WithMetadata> {
    constructor() {
        super("PeerChanged.Payload.WithMetadata", [
            { no: 1, name: "metadata", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<PeerChanged_Payload_WithMetadata>): PeerChanged_Payload_WithMetadata {
        const message = { metadata: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PeerChanged_Payload_WithMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PeerChanged_Payload_WithMetadata): PeerChanged_Payload_WithMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes metadata */ 1:
                    message.metadata = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PeerChanged_Payload_WithMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes metadata = 1; */
        if (message.metadata.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.metadata);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PeerChanged.Payload.WithMetadata
 */
export const PeerChanged_Payload_WithMetadata = new PeerChanged_Payload_WithMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TracksChanged$Type extends MessageType<TracksChanged> {
    constructor() {
        super("TracksChanged", [
            { no: 1, name: "peerId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "update", kind: "message", oneof: "action", T: () => TracksChanged_Payload_Track },
            { no: 3, name: "add", kind: "message", oneof: "action", T: () => TracksChanged_Payload_Track },
            { no: 4, name: "remove", kind: "message", oneof: "action", T: () => TracksChanged_Payload_Track }
        ]);
    }
    create(value?: PartialMessage<TracksChanged>): TracksChanged {
        const message = { peerId: "", action: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TracksChanged>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TracksChanged): TracksChanged {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string peerId */ 1:
                    message.peerId = reader.string();
                    break;
                case /* TracksChanged.Payload.Track update */ 2:
                    message.action = {
                        oneofKind: "update",
                        update: TracksChanged_Payload_Track.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).update)
                    };
                    break;
                case /* TracksChanged.Payload.Track add */ 3:
                    message.action = {
                        oneofKind: "add",
                        add: TracksChanged_Payload_Track.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).add)
                    };
                    break;
                case /* TracksChanged.Payload.Track remove */ 4:
                    message.action = {
                        oneofKind: "remove",
                        remove: TracksChanged_Payload_Track.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).remove)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TracksChanged, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string peerId = 1; */
        if (message.peerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.peerId);
        /* TracksChanged.Payload.Track update = 2; */
        if (message.action.oneofKind === "update")
            TracksChanged_Payload_Track.internalBinaryWrite(message.action.update, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* TracksChanged.Payload.Track add = 3; */
        if (message.action.oneofKind === "add")
            TracksChanged_Payload_Track.internalBinaryWrite(message.action.add, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* TracksChanged.Payload.Track remove = 4; */
        if (message.action.oneofKind === "remove")
            TracksChanged_Payload_Track.internalBinaryWrite(message.action.remove, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TracksChanged
 */
export const TracksChanged = new TracksChanged$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TracksChanged_Payload$Type extends MessageType<TracksChanged_Payload> {
    constructor() {
        super("TracksChanged.Payload", []);
    }
    create(value?: PartialMessage<TracksChanged_Payload>): TracksChanged_Payload {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TracksChanged_Payload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TracksChanged_Payload): TracksChanged_Payload {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TracksChanged_Payload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TracksChanged.Payload
 */
export const TracksChanged_Payload = new TracksChanged_Payload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TracksChanged_Payload_Track$Type extends MessageType<TracksChanged_Payload_Track> {
    constructor() {
        super("TracksChanged.Payload.Track", [
            { no: 1, name: "trackId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "metadata", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<TracksChanged_Payload_Track>): TracksChanged_Payload_Track {
        const message = { trackId: "", metadata: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TracksChanged_Payload_Track>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TracksChanged_Payload_Track): TracksChanged_Payload_Track {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trackId */ 1:
                    message.trackId = reader.string();
                    break;
                case /* bytes metadata */ 2:
                    message.metadata = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TracksChanged_Payload_Track, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trackId = 1; */
        if (message.trackId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trackId);
        /* bytes metadata = 2; */
        if (message.metadata.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.metadata);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TracksChanged.Payload.Track
 */
export const TracksChanged_Payload_Track = new TracksChanged_Payload_Track$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrackPriorityMediaEvent$Type extends MessageType<TrackPriorityMediaEvent> {
    constructor() {
        super("TrackPriorityMediaEvent", [
            { no: 1, name: "trackId", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrackPriorityMediaEvent>): TrackPriorityMediaEvent {
        const message = { trackId: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TrackPriorityMediaEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrackPriorityMediaEvent): TrackPriorityMediaEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string trackId */ 1:
                    message.trackId.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrackPriorityMediaEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string trackId = 1; */
        for (let i = 0; i < message.trackId.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.trackId[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrackPriorityMediaEvent
 */
export const TrackPriorityMediaEvent = new TrackPriorityMediaEvent$Type();
