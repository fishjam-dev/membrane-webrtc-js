// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "custom.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message WebRtcCustomMediaEvent
 */
export interface WebRtcCustomMediaEvent {
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "test";
        /**
         * @generated from protobuf field: Test test = 1;
         */
        test: Test;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message Test
 */
export interface Test {
    /**
     * @generated from protobuf field: string payload = 1;
     */
    payload: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class WebRtcCustomMediaEvent$Type extends MessageType<WebRtcCustomMediaEvent> {
    constructor() {
        super("WebRtcCustomMediaEvent", [
            { no: 1, name: "test", kind: "message", oneof: "event", T: () => Test }
        ]);
    }
    create(value?: PartialMessage<WebRtcCustomMediaEvent>): WebRtcCustomMediaEvent {
        const message = { event: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebRtcCustomMediaEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebRtcCustomMediaEvent): WebRtcCustomMediaEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Test test */ 1:
                    message.event = {
                        oneofKind: "test",
                        test: Test.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).test)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebRtcCustomMediaEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Test test = 1; */
        if (message.event.oneofKind === "test")
            Test.internalBinaryWrite(message.event.test, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebRtcCustomMediaEvent
 */
export const WebRtcCustomMediaEvent = new WebRtcCustomMediaEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Test$Type extends MessageType<Test> {
    constructor() {
        super("Test", [
            { no: 1, name: "payload", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Test>): Test {
        const message = { payload: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Test>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Test): Test {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string payload */ 1:
                    message.payload = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Test, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string payload = 1; */
        if (message.payload !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.payload);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Test
 */
export const Test = new Test$Type();
